// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: protos/pbuser/user.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceJoin_Join_FullMethodName = "/pbuser.ServiceJoin/Join"
)

// ServiceJoinClient is the client API for ServiceJoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceJoinClient interface {
	Join(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (*ResJoin, error)
}

type serviceJoinClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceJoinClient(cc grpc.ClientConnInterface) ServiceJoinClient {
	return &serviceJoinClient{cc}
}

func (c *serviceJoinClient) Join(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (*ResJoin, error) {
	out := new(ResJoin)
	err := c.cc.Invoke(ctx, ServiceJoin_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceJoinServer is the server API for ServiceJoin service.
// All implementations must embed UnimplementedServiceJoinServer
// for forward compatibility
type ServiceJoinServer interface {
	Join(context.Context, *ReqJoin) (*ResJoin, error)
	mustEmbedUnimplementedServiceJoinServer()
}

// UnimplementedServiceJoinServer must be embedded to have forward compatible implementations.
type UnimplementedServiceJoinServer struct {
}

func (UnimplementedServiceJoinServer) Join(context.Context, *ReqJoin) (*ResJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedServiceJoinServer) mustEmbedUnimplementedServiceJoinServer() {}

// UnsafeServiceJoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceJoinServer will
// result in compilation errors.
type UnsafeServiceJoinServer interface {
	mustEmbedUnimplementedServiceJoinServer()
}

func RegisterServiceJoinServer(s grpc.ServiceRegistrar, srv ServiceJoinServer) {
	s.RegisterService(&ServiceJoin_ServiceDesc, srv)
}

func _ServiceJoin_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceJoinServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceJoin_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceJoinServer).Join(ctx, req.(*ReqJoin))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceJoin_ServiceDesc is the grpc.ServiceDesc for ServiceJoin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceJoin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbuser.ServiceJoin",
	HandlerType: (*ServiceJoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ServiceJoin_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pbuser/user.proto",
}

const (
	ServiceLogin_Login_FullMethodName = "/pbuser.ServiceLogin/Login"
)

// ServiceLoginClient is the client API for ServiceLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceLoginClient interface {
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error)
}

type serviceLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceLoginClient(cc grpc.ClientConnInterface) ServiceLoginClient {
	return &serviceLoginClient{cc}
}

func (c *serviceLoginClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, ServiceLogin_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceLoginServer is the server API for ServiceLogin service.
// All implementations must embed UnimplementedServiceLoginServer
// for forward compatibility
type ServiceLoginServer interface {
	Login(context.Context, *ReqLogin) (*ResLogin, error)
	mustEmbedUnimplementedServiceLoginServer()
}

// UnimplementedServiceLoginServer must be embedded to have forward compatible implementations.
type UnimplementedServiceLoginServer struct {
}

func (UnimplementedServiceLoginServer) Login(context.Context, *ReqLogin) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceLoginServer) mustEmbedUnimplementedServiceLoginServer() {}

// UnsafeServiceLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceLoginServer will
// result in compilation errors.
type UnsafeServiceLoginServer interface {
	mustEmbedUnimplementedServiceLoginServer()
}

func RegisterServiceLoginServer(s grpc.ServiceRegistrar, srv ServiceLoginServer) {
	s.RegisterService(&ServiceLogin_ServiceDesc, srv)
}

func _ServiceLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceLogin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceLoginServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceLogin_ServiceDesc is the grpc.ServiceDesc for ServiceLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbuser.ServiceLogin",
	HandlerType: (*ServiceLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ServiceLogin_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pbuser/user.proto",
}

const (
	ServiceInfo_Info_FullMethodName = "/pbuser.ServiceInfo/Info"
)

// ServiceInfoClient is the client API for ServiceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInfoClient interface {
	Info(ctx context.Context, in *ReqInfo, opts ...grpc.CallOption) (*ResInfo, error)
}

type serviceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInfoClient(cc grpc.ClientConnInterface) ServiceInfoClient {
	return &serviceInfoClient{cc}
}

func (c *serviceInfoClient) Info(ctx context.Context, in *ReqInfo, opts ...grpc.CallOption) (*ResInfo, error) {
	out := new(ResInfo)
	err := c.cc.Invoke(ctx, ServiceInfo_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInfoServer is the server API for ServiceInfo service.
// All implementations must embed UnimplementedServiceInfoServer
// for forward compatibility
type ServiceInfoServer interface {
	Info(context.Context, *ReqInfo) (*ResInfo, error)
	mustEmbedUnimplementedServiceInfoServer()
}

// UnimplementedServiceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedServiceInfoServer struct {
}

func (UnimplementedServiceInfoServer) Info(context.Context, *ReqInfo) (*ResInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedServiceInfoServer) mustEmbedUnimplementedServiceInfoServer() {}

// UnsafeServiceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInfoServer will
// result in compilation errors.
type UnsafeServiceInfoServer interface {
	mustEmbedUnimplementedServiceInfoServer()
}

func RegisterServiceInfoServer(s grpc.ServiceRegistrar, srv ServiceInfoServer) {
	s.RegisterService(&ServiceInfo_ServiceDesc, srv)
}

func _ServiceInfo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).Info(ctx, req.(*ReqInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInfo_ServiceDesc is the grpc.ServiceDesc for ServiceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbuser.ServiceInfo",
	HandlerType: (*ServiceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ServiceInfo_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pbuser/user.proto",
}
